################################################################################################################################################
# Fortify lets you build secure software fast with an appsec platform that automates testing throughout the DevSecOps pipeline. Fortify static,#
# dynamic, interactive, and runtime security testing is available on premises or as a service. To learn more about Fortify, start a free trial #
# or contact our sales team, visit microfocus.com/appsecurity.                                                                                 #
#                                                                                                                                              #
# Use this workflow template as a basis for integrating Fortify on Demand Static Application Security Testing(SAST) into your GitHub workflows.#
# This template demonstrates the steps to prepare the code+dependencies, initiate a scan, download results once complete and import into       #
# GitHub Security Code Scanning Alerts. Existing customers should review inputs and environment variables below to configure scanning against  #
# an existing application in your Fortify on Demand tenant. Additional information is available in the comments throughout the workflow, the   #
# documentation for the Fortify actions used, and the Fortify on Demand / ScanCentral Client product documentation. If you need additional     #
# assistance with configuration, feel free to create a help ticket in the Fortify on Demand portal.                                            #
################################################################################################################################################

name: Fortify SAST Scan

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  Fortify-AST-Scan:

    runs-on: self-hosted
    container:
      image: fortifydocker/fortify-ci-tools   
    permissions:
      actions: read
      contents: read
      security-events: write
       

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v4
        
      - name: Run ScanCentral SAST Scan
        uses: fortify/github-action@v1.2.2
        with:
          sast-scan: true
        env:
          SSC_URL: ${{secrets.FTFY_SSC_BASE_URL}}
          SSC_TOKEN: ${{secrets.FTFY_CI_TOKEN_ENC}}
          SSC_APPVERSION: ${{github.action_repository}}:${{github.action_ref}}
          SC_SAST_TOKEN: ${{secrets.FTFY_SAST_CLIENT_TOKEN}}
          # EXTRA_SC_SAST_LOGIN_OPTS: --socket-timeout=60s
          EXTRA_PACKAGE_OPTS: -bt mvn -bc package --quiet
          SC_SAST_SENSOR_VERSION: 23.2
          DO_WAIT: true
          # DO_EXPORT: true
          # TOOL_DEFINITIONS: https://ftfy.mycompany.com/tool-definitions/v1/tool-definitions.yaml.zip

      - name: SCA
        run: |
          wget -qO- https://gitlab.ekseed.org/fortify/nexus-iq-integration/-/releases/1.1.4/downloads/binaries/nexus-iq-integration -O nexus-iq-integration.zip 
          unzip nexus-iq-integration.zip -d /usr/bin/

          nexus-iq-cli --server-url ${{secrets.IQ_URL}} --authentication ${{secrets.IQ_USERNAME}}:${{secrets.IQ_PASSWORD}} --application-id $GITHUB_REPOSITORY --stage build pom.xml
          fcli ssc session login --url ${{secrets.FTFY_SSC_BASE_URL}} -t ${{secrets.FTFY_CI_TOKEN_ENC}} -k
          fcli ssc appversion create $GITHUB_REPOSITORY:$GITHUB_REF_NAME:$GITHUB_REF_NAME --auto-required-attrs --skip-if-exists
          nexus-iq-integration -iqurl ${{secrets.IQ_URL}} -iquser ${{secrets.IQ_USERNAME}} -iqpassword ${{secrets.IQ_PASSWORD}} -iqproject $GITHUB_REPOSITORY -iqstage build \
            -sscurl ${{secrets.FTFY_SSC_BASE_URL}} -ssctoken ${{secrets.FTFY_CI_TOKEN_ENC}} -sscapp $GITHUB_REPOSITORY -sscversion $GITHUB_REF_NAME


        

