################################################################################################################################################
# Fortify lets you build secure software fast with an appsec platform that automates testing throughout the DevSecOps pipeline. Fortify static,#
# dynamic, interactive, and runtime security testing is available on premises or as a service. To learn more about Fortify, start a free trial #
# or contact our sales team, visit microfocus.com/appsecurity.                                                                                 #
#                                                                                                                                              #
# Use this workflow template as a basis for integrating Fortify on Demand Static Application Security Testing(SAST) into your GitHub workflows.#
# This template demonstrates the steps to prepare the code+dependencies, initiate a scan, download results once complete and import into       #
# GitHub Security Code Scanning Alerts. Existing customers should review inputs and environment variables below to configure scanning against  #
# an existing application in your Fortify on Demand tenant. Additional information is available in the comments throughout the workflow, the   #
# documentation for the Fortify actions used, and the Fortify on Demand / ScanCentral Client product documentation. If you need additional     #
# assistance with configuration, feel free to create a help ticket in the Fortify on Demand portal.                                            #
################################################################################################################################################

name: Fortify Secret Scanning

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  Fortify-AST-Scan:

    runs-on: self-hosted
    container:
      image: fortifydocker/fortify-ci-tools   
    permissions:
      actions: read
      contents: read
      security-events: write
       

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v4

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
        
      - name: Create Application Version
        run: |
            fcli ssc session login --url ${{ secrets.FTFY_SSC_BASE_URL }} --token ${{ secrets.FTFY_CI_TOKEN_DEC }}
            fcli ssc appversion create $GITHUB_REPOSITORY:${{ steps.extract_branch.outputs.branch }} --skip-if-exists --auto-required-attrs --issue-template "Prioritized High Risk Issue Template"

      - name: Secrets Scanning
        run: |
          fcli tool scancentral-client install -t ${{ secrets.FTFY_SAST_CLIENT_TOKEN }} -u all -y --store scancentral
          alias scancentral=$(fcli util var contents scancentral -o expr="{globalBinDir}")/scancentral
          jobToken=$(scancentral --sscurl ${{ secrets.FTFY_SSC_BASE_URL }} --ssctoken ${{ secrets.FTFY_CI_TOKEN_DEC }} start \
          -bt mvn -bc package -application $GITHUB_REPOSITORY -version ${{ steps.extract_branch.outputs.branch }} \
          -upload -uptoken ${{ secrets.FTFY_CI_TOKEN_DEC }} | sed -n 's/.*Submitted job and received token:  //p')
